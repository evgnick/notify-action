name: 'Notify Action'
description: 'Sends test execution summary to Telegram'
author: 'evgnick'
inputs:
  github-token:
    description: 'GitHub Token'
    required: true
  telegram-token:
    description: 'Telegram Bot Token'
    required: true
  telegram-chat-id:
    description: 'Telegram Chat ID'
    required: true
  workflow-name:
    description: 'Name of the workflow to track'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Find the latest CI run
      uses: actions/github-script@v6
      id: find_ci_run
      with:
        script: |
          const runs = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100,
          });
          const ciRuns = runs.data.workflow_runs
            .filter(run => run.name === process.env.WORKFLOW_NAME && run.status === "completed" && (run.conclusion === "success" || run.conclusion === "failure"))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          const latestCiRun = ciRuns[0];
          core.setOutput("run_number", latestCiRun.run_number);
          core.setOutput("run_id", latestCiRun.id);
      env:
        WORKFLOW_NAME: ${{ inputs.workflow-name }}
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Fetch test results from Allure report
      shell: bash
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        REPORT_URL="https://${{ github.repository_owner }}.github.io/$REPO_NAME/${{ steps.find_ci_run.outputs.run_number }}/widgets/summary.json"

        wget -q -O summary.json "$REPORT_URL" || { echo "Failed to download report"; exit 1; }

        PASSED=$(jq '.statistic.passed' summary.json || echo "0")
        FAILED=$(jq '.statistic.failed' summary.json || echo "0")
        BROKEN=$(jq '.statistic.broken' summary.json || echo "0")
        SKIPPED=$(jq '.statistic.skipped' summary.json || echo "0")
        UNKNOWN=$(jq '.statistic.unknown' summary.json || echo "0")
        DURATION=$(jq '.time.duration' summary.json || echo "0")
        DURATION_FINAL=$(date -ud @$((DURATION / 1000)) +'%M:%S')

        echo "PASSED=$PASSED" >> $GITHUB_ENV
        echo "FAILED=$FAILED" >> $GITHUB_ENV
        echo "BROKEN=$BROKEN" >> $GITHUB_ENV
        echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
        echo "UNKNOWN=$UNKNOWN" >> $GITHUB_ENV
        echo "DURATION_FINAL=$DURATION_FINAL" >> $GITHUB_ENV

    - name: Generate test results chart
      shell: bash
      run: |
        pip install matplotlib
        python <<EOF
        import matplotlib.pyplot as plt
        import os
        from matplotlib import patches

        passed = int(os.getenv('PASSED', 0))
        failed = int(os.getenv('FAILED', 0))
        broken = int(os.getenv('BROKEN', 0))
        skipped = int(os.getenv('SKIPPED', 0))
        unknown = int(os.getenv('UNKNOWN', 0))

        labels = ['Passed', 'Failed', 'Broken', 'Skipped', 'Unknown']
        values = [passed, failed, broken, skipped, unknown]
        colors = ['#8BC34A', '#F44336', '#FF9800', '#2196F3', '#8A2BE2']

        fig, ax = plt.subplots(figsize=(3, 2))
        wedges, texts, autotexts = ax.pie(
            values, labels=None, autopct='%1.1f%%', colors=colors,
            startangle=90, wedgeprops={'edgecolor': 'white', 'linewidth': 2}, pctdistance=0.85,
        )

        for autotext in autotexts:
            if float(autotext.get_text().replace('%', '')) == 0:
                autotext.set_text('')
            autotext.set_fontsize(6)

        centre_circle = plt.Circle((0, 0), 0.60, fc='white')
        fig.gca().add_artist(centre_circle)

        ax.text(0, 0, str(sum(values)), ha='center', va='center', fontsize=16, fontweight='bold')

        legend_x = 1.05
        legend_y = 0.6
        plt.gca().set_position([0, 0, 0.7, 1])

        total = sum(values)
        percentages = [(value / total) * 100 if total > 0 else 0 for value in values]

        for i, (label, color, value) in enumerate(zip(labels, colors, values)):
          rect = patches.Rectangle(
            (legend_x - 0.07, legend_y - i * 0.1 - 0.025),
            0.05, 0.05, color=color, transform=ax.transAxes, clip_on=False
          )
          plt.gcf().add_artist(rect)

          plt.gcf().text(
            legend_x - 0.35,
            legend_y - i * 0.1,
            f'{value} - {label}',
            color='black', fontsize=8,
            bbox=dict(facecolor='white', edgecolor='white', boxstyle='square,pad=0.3'),
            ha='left', va='center'
          )

        plt.savefig('chart.png', dpi=300, bbox_inches='tight', pad_inches=0.05)
        EOF

    - name: Send Telegram Notification
      shell: bash
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        REPORT_LINK="https://${{ github.repository_owner }}.github.io/$REPO_NAME/${{ steps.find_ci_run.outputs.run_number }}/"
        CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
        TIMESTAMP=$(date +"%Y.%m.%d %H:%M:%S")

        ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|:|\\:|g; s|/|\\/|g')
        ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|:|\\:|g; s|/|\\/|g')
        ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|\.|\\.|g')

        MESSAGE="üìù Report: [open](${ESCAPED_REPORT_LINK})
        üìÖ Date and time: ${ESCAPED_TIMESTAMP}
        ‚è±Ô∏è Execution time: $DURATION_FINAL
        ‚öôÔ∏è Build: ${{ steps.find_ci_run.outputs.run_number }}
        üîó Run: [see](${ESCAPED_CI_RUN_LINK})"

        ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed -E 's/([\\`*_{}\[\]()#+\-!|<>])/\\\1/g')

        curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram-token }}/sendPhoto" \
        -F chat_id="${{ inputs.telegram-chat-id }}" \
        -F photo="@chart.png" \
        -F caption="$ESCAPED_MESSAGE" \
        -F parse_mode="MarkdownV2"
